import hashlib
import requests
import argparse


def check_password_strength(password):
    min_length = 8
    if len(password) < min_length:
        return "Password is too short."
    if not any(char.isdigit() for char in password):
        return "Password must contain at least one digit."
    if not any(char.isupper() for char in password):
        return "Password must contain at least one uppercase letter."
    if not any(char.islower() for char in password):
        return "Password must contain at least one lowercase letter."
    return "Password is strong."


def check_password(password):
    sha1_password = hashlib.sha1(password.encode('utf-8')).hexdigest().upper()
    prefix, suffix = sha1_password[:5], sha1_password[5:]
    url = f"https://api.pwnedpasswords.com/range/{prefix}"
    response = requests.get(url)
    hashes = (line.split(':') for line in response.text.splitlines())
    compromised_hashes = [count for tail, count in hashes if tail == suffix]

    if compromised_hashes:
        print(f"The password '{password}' has been compromised {compromised_hashes[0]} times.")
    else:
        print(f"The password '{password}' has not been compromised.")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Check password strength and whether it has been compromised.')
    parser.add_argument('password', type=str, help='The password to check')
    args = parser.parse_args()
    
    password = args.password
    check_password(password)
    print(check_password_strength(password))
