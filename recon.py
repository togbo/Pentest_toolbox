import argparse
import os
import subprocess


# ANSI color variables
RED = '\033[0;31m'
GREEN = '\033[0;32m'
YELLOW = '\033[0;33m'
NC = '\033[0m'  # No Color

def create_output_directory(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)

def run_command(command, output_file):
    with open(output_file, 'w') as f:
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        for line in iter(process.stdout.readline, ''):
            print(line, end='')  # Print output to terminal
            f.write(line)        # Write output to file
        for line in iter(process.stderr.readline, ''):
            print(RED + line + NC, end='')  # Print errors to terminal in red
            f.write(line)              # Write errors to file
        process.stdout.close()
        process.stderr.close()
        process.wait()

def perform_whois(domain, output_dir):
    output_file = os.path.join(output_dir, f"{domain}_whois.txt")
    print(f"Performing WHOIS lookup for {domain}. Results will be saved to {output_file}...")
    command = ['whois', domain]
    run_command(command, output_file)
    print("==================================================================================")

def perform_dns_lookup(domain, output_dir):
    output_file = os.path.join(output_dir, f"{domain}_dns_lookup.txt")
    print(f"Performing DNS lookup for {domain}. Results will be saved to {output_file}...")
    command = ['dig', 'any', domain]
    run_command(command, output_file)
    print("==================================================================================")

def perform_subdomain_discovery(domain, output_dir):
    output_file = os.path.join(output_dir, f"{domain}_subdomains.txt")
    print(f"Performing subdomain discovery for {domain}. Results will be saved to {output_file}...")
    command = ['sublist3r', '-d', domain, '-o', output_file]
    run_command(command, output_file)
    print("==================================================================================")

def perform_wpscan(domain, protocol, output_dir):
    output_file = os.path.join(output_dir, f"{domain}_wpscan_{protocol}.txt")
    print(f"Performing WPScan for {domain} over {protocol.upper()}. Results will be saved to {output_file}...")
    
    # Commande WPScan avec support pour HTTP/HTTPS
    command = ['wpscan', '--url', f"{protocol}://{domain}", '--no-update', '--format', 'cli', '--output', output_file]
    
    run_command(command, output_file)
    print("==================================================================================")

def perform_recon_ng(domain, output_dir):
    output_file = os.path.join(output_dir, f"{domain}_reconng.txt")
    print(f"Running Recon-ng modules for {domain}. Results will be saved to {output_file}...")
    
    # Modules Recon-ng à utiliser pour une reconnaissance plus poussée
    commands = [
        f"recon-cli -m recon/domains-hosts/brute_hosts -o SOURCE={domain}",
        f"recon-cli -m recon/hosts-hosts/resolve -o SOURCE={domain}",
        f"recon-cli -m recon/netblocks-companies/owned_netblocks -o SOURCE={domain}",
        f"recon-cli -m recon/hosts-hosts/reverse_resolve -o SOURCE={domain}"
    ]
    
    with open(output_file, 'w') as f:
        for cmd in commands:
            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, shell=True)
            for line in iter(process.stdout.readline, ''):
                print(line, end='')  # Print output to terminal
                f.write(line)        # Write output to file
            for line in iter(process.stderr.readline, ''):
                print(RED + line + NC, end='')  # Print errors to terminal in red
                f.write(line)              # Write errors to file
            process.stdout.close()
            process.stderr.close()
            process.wait()
    print("==================================================================================")


def perform_whatweb(domain, protocol, output_dir):
    output_file = os.path.join(output_dir, f"{domain}_whatweb_{protocol}.txt")
    print(f"Running WhatWeb for {domain} over {protocol.upper()}. Results will be saved to {output_file}...")
    command = ['whatweb', f"{protocol}://{domain}"]
    run_command(command, output_file)
    print("==================================================================================")

def main():
    parser = argparse.ArgumentParser(description="Reconnaissance Tool")
    parser.add_argument("-d", "--domain", type=str, required=True, help="Domain to perform reconnaissance on")
    
    args = parser.parse_args()

    domain = args.domain
    output_dir = os.path.join("recon", domain)
    create_output_directory(output_dir)
    
    perform_whois(domain, output_dir)
    perform_dns_lookup(domain, output_dir)
    perform_subdomain_discovery(domain, output_dir)
    perform_recon_ng(domain, output_dir)
    perform_whatweb(domain, "http", output_dir)
    perform_whatweb(domain, "https", output_dir)
    # Effectuer WPScan sur les deux protocoles HTTP et HTTPS
    perform_wpscan(domain, "http", output_dir)
    perform_wpscan(domain, "https", output_dir)

if __name__ == "__main__":
    main()
