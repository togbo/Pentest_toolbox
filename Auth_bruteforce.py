import subprocess
import os

# Define color codes
class Colors:
    RESET = "\033[0m"
    BOLD = "\033[1m"
    UNDERLINE = "\033[4m"
    RED = "\033[91m"
    GREEN = "\033[92m"
    YELLOW = "\033[93m"
    BLUE = "\033[94m"
    MAGENTA = "\033[95m"
    CYAN = "\033[96m"

def run_hydra(target, username_list, password_list, service, port, failure_msg, threads):
    if service == "http-post-form":
        # Specify the form path and required parameters here
        form_path = input("Enter the form path (default: /login): ")
        data_format = input("Enter the POST data format (default: username=^USER^&password=^PASS^): ")
        
        # Use default values if the user does not provide them
        if not form_path:
            form_path = "/login"  # Default form path
        if not data_format:
            data_format = "username=^USER^&password=^PASS^"  # Default POST data format
        
        # Use the default failure message if not provided
        if not failure_msg:
            failure_msg = "incorrect"  # Default failure message for HTTP services

        command = [
            "hydra", "-L", username_list, "-P", password_list, "-s", str(port), "-f", "-V",
            "-t", str(threads),  # Add the thread count option
            "http-post-form", f"{target}{form_path}:{data_format}:F={failure_msg}"
        ]
    else:
        command = [
            "hydra", "-L", username_list, "-P", password_list, f"{service}://{target}", "-s", str(port), "-f", "-V",
            "-t", str(threads)  # Add the thread count option
        ]

    try:
        # Start the Hydra process
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

        # Continuously read from stdout and stderr
        while True:
            output = process.stdout.readline()
            if output == '' and process.poll() is not None:
                break
            if output:
                print(f"{Colors.GREEN}{output.strip()}{Colors.RESET}")
                
        # Capture any remaining stderr output
        stderr_output = process.stderr.read()
        if stderr_output:
            print(f"{Colors.RED}{stderr_output.strip()}{Colors.RESET}")
        
        # Check the return code
        if process.returncode == 0:
            print(f"{Colors.BLUE}[INFO]{Colors.RESET} Hydra scan completed successfully.")
        else:
            print(f"{Colors.RED}[ERROR]{Colors.RESET} Hydra scan encountered an issue.")
        
    except Exception as e:
        print(f"{Colors.RED}An error occurred: {e}{Colors.RESET}")


def main():
    # Request parameters from the user
    target = input("Enter the target IP address or domain: ")

    # Default lists for usernames and passwords
    default_username_list = "/usr/share/wordlists/rockyou.txt"
    default_password_list = "/usr/share/wordlists/rockyou.txt"

    # Username input
    username_input = input(f"Enter the path to the username list or a single username (default: {default_username_list}): ")
    if username_input:
        if os.path.isfile(username_input):
            username_list = username_input
        else:
            username_list = None  # Assume it's a single username
            single_username = username_input
    else:
        if os.path.isfile(default_username_list):
            username_list = default_username_list
            print(f"{Colors.CYAN}Using default username list: {username_list}{Colors.RESET}")
        else:
            print(f"{Colors.RED}Error: Default username list not found at {default_username_list}. Please specify a valid username list.{Colors.RESET}")
            return

    # Password input
    password_input = input(f"Enter the path to the password list or a single password (default: {default_password_list}): ")
    if password_input:
        if os.path.isfile(password_input):
            password_list = password_input
        else:
            password_list = None  # Assume it's a single password
            single_password = password_input
    else:
        if os.path.isfile(default_password_list):
            password_list = default_password_list
            print(f"{Colors.CYAN}Using default password list: {password_list}{Colors.RESET}")
        else:
            print(f"{Colors.RED}Error: Default password list not found at {default_password_list}. Please specify a valid password list.{Colors.RESET}")
            return

    # Default service set to HTTP POST form
    service = input("Enter the service to test (default: http-post-form): ")
    if not service:
        service = "http-post-form"

    # Default port for HTTP services
    port = input(f"Enter the port number (default: 80 for HTTP): ")
    if not port:
        port = 80
    else:
        port = int(port)

    # Default failure message for authentication
    failure_msg = input("Enter the authentication failure message (default: incorrect): ")
    if not failure_msg:
        failure_msg = "incorrect"

    # Ask for the number of parallel threads to use (default: 4)
    threads = input("Enter the number of parallel threads to use (default: 4): ")
    if not threads:
        threads = 4
    else:
        threads = int(threads)

    # Prepare the final username and password lists
    if username_list:
        final_username_list = username_list
    else:
        final_username_list = "/tmp/hydra_user.txt"
        with open(final_username_list, 'w') as f:
            f.write(single_username + "\n")

    if password_list:
        final_password_list = password_list
    else:
        final_password_list = "/tmp/hydra_pass.txt"
        with open(final_password_list, 'w') as f:
            f.write(single_password + "\n")

    # Run the Hydra attack with the specified parameters
    run_hydra(target, final_username_list, final_password_list, service, port, failure_msg, threads)

    # Clean up temporary files
    if not username_list:
        os.remove(final_username_list)
    if not password_list:
        os.remove(final_password_list)

if __name__ == "__main__":
    main()
