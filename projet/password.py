import hashlib
import requests

def check_password_strength(password):
    min_length = 8
    if len(password) < min_length:
        return False, "Password is too short."
    if not any(char.isdigit() for char in password):
        return False, "Password must contain at least one digit."
    if not any(char.isupper() for char in password):
        return False, "Password must contain at least one uppercase letter."
    if not any(char.islower() for char in password):
        return False, "Password must contain at least one lowercase letter."
    return True, "Password is strong."

def check_if_password_compromised(password):
    sha1pwd = hashlib.sha1(password.encode('utf-8')).hexdigest().upper()
    first5_char, tail = sha1pwd[:5], sha1pwd[5:]
    response = requests.get(f'https://api.pwnedpasswords.com/range/{first5_char}')
    hashes = (line.split(':') for line in response.text.splitlines())
    for h, count in hashes:
        if h == tail:
            return True, count
    return False, 0

def analyze_passwords(passwords):
    for service, password in passwords.items():
        strong, message = check_password_strength(password)
        print(f"Service: {service}, Password: {password}, Strength: {'Strong' if strong else 'Weak'} - {message}")
        compromised, count = check_if_password_compromised(password)
        if compromised:
            print(f"WARNING: The password for {service} has been exposed {count} times according to Have I Been Pwned.")

passwords = {
    'ssh': 'password123',
    'ftp': 'admin2021',
    'db': 'password123'
}

analyze_passwords(passwords)
