import json
import re

def parse_data(file_path):
    services = []
    vulnerabilities = {}
    current_port = None

    with open(file_path, 'r') as file:
        lines = file.readlines()

    service_regex = re.compile(r"Found service on port (\d+): (\{.*\})")
    vulnerability_regex = re.compile(r"'_id': '(\w+:\d+)'")  # Exemple pour attraper des ID de vulnérabilité

    for line in lines:
        service_match = service_regex.search(line)
        if service_match:
            port, json_data = service_match.groups()
            port = int(port)
            try:
                # Convertir la chaîne en JSON
                json_data = json_data.replace("'", '"')
                service_info = json.loads(json_data)
                services.append(service_info)
                vulnerabilities[port] = []
                current_port = port
            except json.JSONDecodeError as e:
                print(f"Error decoding JSON: {e}")

        if 'No vulnerabilities found' in line and current_port:
            vulnerabilities[current_port].append({'id': 'None', 'description': 'No vulnerabilities found.'})

        vuln_matches = vulnerability_regex.findall(line)
        for vuln_id in vuln_matches:
            if current_port:
                vulnerabilities[current_port].append({'id': vuln_id, 'description': 'Details not provided'})

    return services, vulnerabilities

def format_report(services, vulnerabilities):
    report = "Network Services and Vulnerabilities Report:\n\n"
    for service in services:
        port = service.get('port', None)  # Utilisez None comme valeur par défaut si 'port' n'est pas trouvé
        report += f"Port: {port} ({service.get('name', 'Unknown')})\n"
        report += f" - State: {service.get('state', 'Unknown')}\n"
        report += f" - Product: {service.get('product', 'Unknown')} {service.get('version', 'Unknown')}\n"
        report += "  Vulnerabilities:\n"
        # Assurez-vous que port est non None avant de l'utiliser pour chercher des vulnérabilités
        if port is not None:
            vuln_list = vulnerabilities.get(port, [])  # Utilisez port comme clé pour chercher des vulnérabilités
            for vuln in vuln_list:
                report += f"    - ID: {vuln['id']} Description: {vuln.get('description', 'No description available')}\n"
        else:
            report += "    No port information available.\n"
        report += "\n"
    return report

# Path to the output file from the vulnerability scanner
file_path = 'output.txt'
services, vulnerabilities = parse_data(file_path)
report = format_report(services, vulnerabilities)
print(report)
