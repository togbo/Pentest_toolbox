import nmap
import requests

def scan_network(target):
    nm = nmap.PortScanner()
    print(f"Scanning {target}...")

    # Lancer le scan nmap
    try:
        nm.scan(target, arguments='-sV')
        print("Scan completed.")
    except Exception as e:
        print(f"An error occurred during scanning: {e}")
        return []

    services = []
    for host in nm.all_hosts():
        print(f"Host: {host}")
        for proto in nm[host].all_protocols():
            print(f"Protocol: {proto}")
            lport = nm[host][proto].keys()
            for port in lport:
                service = nm[host][proto][port]
                services.append({
                    'host': host,
                    'port': port,
                    'name': service['name'],
                    'product': service.get('product', ''),
                    'version': service.get('version', ''),
                })
                print(f"Found service on port {port}: {service}")
    return services

def check_vulnerabilities(service):
    base_url = "https://vulners.com/api/v3/search/lucene/"
    query = f"{service['name']} {service['product']} {service['version']}"
    print(f"Checking vulnerabilities for {query}...")

    try:
        response = requests.get(base_url, params={'query': query})
        response.raise_for_status()
        data = response.json()
        if 'data' in data and 'search' in data['data']:
            return data['data']['search']
    except requests.exceptions.RequestException as e:
        print(f"An error occurred while checking vulnerabilities: {e}")
    return []

def main(target):
    services = scan_network(target)
    for service in services:
        print(f"Checking vulnerabilities for {service['name']} {service['product']} {service['version']} on port {service['port']}")
        vulnerabilities = check_vulnerabilities(service)
        if vulnerabilities:
            print(f"Found {len(vulnerabilities)} vulnerabilities for {service['name']} {service['product']} {service['version']}:")
            print("Raw vulnerability data:", vulnerabilities)  # Ajouté pour inspecter les données brutes
            for vuln in vulnerabilities:
                vuln_id = vuln.get('id', 'N/A')
                vuln_title = vuln.get('title', 'No title')
                print(f"- {vuln_id}: {vuln_title}")
        else:
            print(f"No vulnerabilities found for {service['name']} {service['product']} {service['version']}")

if __name__ == "__main__":
    target = "scanme.nmap.org"  # Remplacez par l'adresse IP ou le nom de domaine cible
    main(target)
